(*
run with
`makam --run-tests soenke`
*)

tests : testsuite. %testsuite tests.

typ : type.

tint : typ.
tarrow : typ -> typ -> typ.
forall : (typ -> typ) -> typ.

term : type.

intconst : int -> term.
add : term -> term -> term.
app : term -> term -> term.
lam : (term -> term) -> term.   (* lam (fun x => x) = λx.x *)
lam : typ -> (term -> term) -> term.   (* lam (fun x => x) = λx.x *)
tlam : (typ -> term) -> term.
tapp : term -> typ -> term.


eq (intconst 5) X ?
>> Yes:
>> X := intconst 5.


eval : term -> term -> prop.

eval (intconst N) (intconst N).
eval (add E1 E2) (intconst K) :-
  eval E1 (intconst N),
  eval E2 (intconst M),
  plus N M K.
eval (app E1 E2) V :-
  eval E1 (lam F),
  eval E2 V2,
  eval (F V2) V.
eval (lam F) (lam F).
eval (tlam T_F) (tlam T_F).
eval (tapp Term Type) Result :-
  eval Term (tlam T_F),
  eval (T_F Type) Result.
% type erasure :)
eval (lam T F) (lam F).


typecheck : term -> typ -> prop.

typecheck (intconst _) tint.
typecheck (add E1 E2) tint :-
  typecheck E1 tint,
  typecheck E2 tint.
typecheck (app E1 E2) T' :-
  typecheck E1 (tarrow T T'),
  typecheck E2 T.
typecheck (lam F) (tarrow T T') :-
  (x:term ->
    typecheck x T ->
      typecheck (F x) T').
typecheck (lam T F) (tarrow T T') :-
  typecheck (lam F) (tarrow T T').
typecheck (tlam T_F) (forall T) :-
  (a:typ ->
    typecheck (T_F a) (T a)).
typecheck (tapp Term Type) Sigma' :-
  typecheck Term (forall T_F),
  unify (T_F Type) Sigma'.


typecheck (lam (fun x => add (intconst 5) x)) T ?
>> Yes:
>> T := tarrow tint tint.


typecheck (lam (fun x => intconst 5)) T ?
>> Yes:
>> T := tarrow T' tint.

typecheck (lam (fun x => x)) T ?
>> Yes:
>> T := tarrow T' T'.

typecheck_and_eval : term -> typ -> term -> prop.
typecheck_and_eval Program Type Result :-
  typecheck Program Type,
  eval Program Result.

%  %trace+ eval.
typecheck_and_eval ( app (lam (fun x => app x x)) (lam (fun x => app x x)) ) Type Result ?
>> Impossible.

typecheck_and_eval ( app (lam (fun x => add (intconst 5) x)) (intconst 10) ) Type Result ?
>> Yes:
>> Type := tint,
>> Result := intconst 15.

typecheck ( app (lam tint (fun x => add (intconst 5) x)) (intconst 10) ) Type ?
>> Yes:
>> Type := tint.

typecheck_and_eval ( app (lam tint (fun x => add (intconst 5) x)) (intconst 10) ) Type Result ?
>> Yes:
>> Type := tint,
>> Result := intconst 15.

typecheck (tlam (fun a => (lam a (fun x => x)))) Type ?
>> Yes:
>> Type := forall (fun a => tarrow a a).

typecheck (tapp (tlam (fun a => (lam a (fun x => x)))) tint) Type ?
>> Yes:
>> Type := tarrow tint tint.

eval (app (tapp (tlam (fun a => (lam a (fun x => x)))) tint) (intconst 42)) Result ?
>> Yes:
>> Result := intconst 42.
