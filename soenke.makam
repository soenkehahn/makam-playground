(*
run with
`makam --run-tests soenke`
*)

tests : testsuite. %testsuite tests.


term : type.

intconst : int -> term.
add : term -> term -> term.
app : term -> term -> term.
lam : (term -> term) -> term.   (* lam (fun x => x) = Î»x.x *)


eq (intconst 5) X ?
>> Yes:
>> X := intconst 5.


eval : term -> term -> prop.

eval (intconst N) (intconst N).
eval (add E1 E2) (intconst K) :-
  eval E1 (intconst N),
  eval E2 (intconst M),
  plus N M K.
eval (app E1 E2) V :-
  eval E1 (lam F),
  eval E2 V2,
  eval (F V2) V.
eval (lam F) (lam F).


eval ( app (lam (fun x => add (intconst 5) x)) (intconst 10) ) X ?
>> Yes:
>> X := intconst 15.

typ : type.

tint : typ.
tarrow : typ -> typ -> typ.


typecheck : term -> typ -> prop.

typecheck (intconst _) tint.
typecheck (add E1 E2) tint :-
  typecheck E1 tint,
  typecheck E2 tint.
typecheck (app E1 E2) T' :-
  typecheck E1 (tarrow T T'),
  typecheck E2 T.
typecheck (lam F) (tarrow T T') :-
  (x:term ->
    typecheck x T ->
      typecheck (F x) T').


typecheck (lam (fun x => add (intconst 5) x)) T ?
>> Yes:
>> T := tarrow tint tint.


typecheck (lam (fun x => intconst 5)) T ?
>> Yes:
>> T := tarrow T' tint.

typecheck (lam (fun x => x)) T ?
>> Yes:
>> T := tarrow T' T'.

%  %trace+ eval.
%  eval ( app (lam (fun x => app x x)) (lam (fun x => app x x)) ) X ?

%  typecheck_and_eval



(*

ctx = map variable type

type = tint | tarrow . . | metavariable int

metavariables = map index (either unknown type)

newmetavariable : type


chase : index -> either unknown type -> ()
chase i when metavariables(i) == unknown = unknown
chase i when metavariables(i) == metavariable i' = chase i'
chase i when metavariables(i) == t = t

unify : type -> type -> ()

main =
  do x <- newmetavariable
     typecheck [] term x
     print(chase(x))


typecheck : ctx -> term -> type -> ()


typecheck G (intconst N) T =
  do unify T tint

typecheck G (add E1 E2) T =
  do unify T tint
     typecheck G E1 tint
     typecheck G E2 tint


typecheck G (app E1 E2) t' =
  do t <- newmeta
     typecheck G E1 (tarrow t t')
     typecheck G E2 t

typecheck G (lam X Body) tout =
  do t <- newmeta
     t' <- newmeta
     unify tout (tarrow t t')
     G' <- add (X, t) G
     typecheck G' Body t'

*)
