tests : testsuite.

%testsuite tests.

catList : type -> type.
catList : (list A -> list A) -> catList A.

cons : A -> catList A -> catList A -> prop.
cons A (catList (fun n => List n)) (catList (fun n => cons A (List n))).

oneTwoThree : catList int -> prop.
oneTwoThree (catList (fun n => cons 1 (cons 2 (cons 3 n)))).

t_cons : catList int -> prop.
t_cons X <-
  oneTwoThree List,
  cons 4 List X.
>> t_cons X?
>> Yes:
>> X := catList (fun n => cons 4 (cons 1 (cons 2 (cons 3 n)))).

concat : catList A -> catList A -> catList A -> prop.
concat
  (catList (fun nil => A nil))
  (catList (fun nil => B nil))
  (catList (fun nil => A (B nil))).

t_concat : catList int -> prop.
t_concat X <-
  oneTwoThree List,
  concat List List X.
>> t_concat X?
>> Yes:
>> X := catList (fun n => cons 1 (cons 2 (cons 3 (cons 1 (cons 2 (cons 3 n)))))).

append : catList A -> A -> catList A -> prop.
append (catList (fun nil => List nil)) A (catList (fun nil => List (cons A nil))).

t_append : catList int -> prop.
t_append X <-
  oneTwoThree List,
  append List 4 X.
>> t_append X?
>> Yes:
>> X := catList (fun n => cons 1 (cons 2 (cons 3 (cons 4 n)))).

reverse : catList A -> catList A -> prop.
reverse (catList (fun nil => nil)) (catList (fun nil => nil)).
reverse
  (catList (fun nil => cons A (R nil)))
  (catList (pfun nil => R' (cons A nil))) <-
    reverse (catList R) (catList R').

t_reverse : catList int -> prop.
t_reverse X <-
  oneTwoThree List,
  reverse List X.
>> t_reverse X?
>> Yes:
>> X := catList (fun nil => cons 3 (cons 2 (cons 1 nil))).

map : (A -> B -> prop) -> catList A -> catList B -> prop.
map F (catList (fun nil => nil)) (catList (fun nil => nil)).
map F
  (catList (fun nil => cons A (R nil)))
  (catList (fun nil => cons A' (R' nil))) <-
    F A A',
    map F (catList R) (catList R').

t_map : catList int -> prop.
t_map X <-
  oneTwoThree List,
  map (pfun X => mult 2 X) List X.
>> t_map X?
>> Yes:
>> X := catList (fun nil => cons 2 (cons 4 (cons 6 nil))).
